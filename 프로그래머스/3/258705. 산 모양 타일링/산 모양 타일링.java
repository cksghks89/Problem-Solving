import java.util.*;

class Solution {
    public int solution(int n, int[] tops) {
        // 초기화 ---- start
        int[][] dp = new int[2][n + 1];

        // 0 = 삼각형, 1 = 마름모
        dp[0][0] = 1;
        dp[1][0] = 0;
        // 초기화 ---- end


        // 구현부 ---- start
        // DP를 활용하여 이전의 경우의 수를 저장한다.
        // 경우의 수 1. top이 없는 경우
            // 경우의 수 1-1. 마지막이 삼각형으로 끝나는 경우
            // 경우의 수 1-2. 마지막이 마름모로 끝나는 경우
        // 경우의 수 2. top이 있는 경우
            // 경우의 수 2-1. 마지막이 삼각형으로 끝나는 경우
            // 경우의 수 2-2. 마지막이 마름모로 끝나는 경우
        for (int i = 1; i <= n; i++) {
            if (tops[i - 1] == 0) {
                dp[0][i] = (dp[1][i - 1] + dp[0][i - 1] * 2) % 10007;   // 1-1.
                dp[1][i] = (dp[1][i - 1] + dp[0][i - 1]) % 10007;       // 1-2.
            } else {
                dp[0][i] = (3 * dp[0][i - 1] + 2 * dp[1][i - 1]) % 10007;   // 2-1.
                dp[1][i] = (dp[0][i - 1] + dp[1][i - 1]) % 10007;           // 2-2.
            }
        }
        // 구현부 ---- end


        // 출력
        return (dp[0][n] + dp[1][n]) % 10007;
    }
}